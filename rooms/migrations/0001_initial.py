# Generated by Django 5.1 on 2024-10-02 18:46

import cloudinary.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('subject', models.CharField(choices=[('problem', 'Problem'), ('feedback', 'Feedback'), ('suggestion', 'Suggestion'), ('question', 'Question')], max_length=50)),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('resolved', 'Resolved')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('password', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator(message='Password must be at least 8 characters long and include both letters and numbers.', regex='^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$')])),
                ('contact_number', models.CharField(help_text='Contact phone number', max_length=15)),
                ('is_landowner', models.BooleanField(default=False, help_text='Check this if the user is a landowner, otherwise they will be a leasee.')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Landlord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(choices=[('Bhaktapur Durbar Square', 'Bhaktapur Durbar Square'), ('Taumadhi Square', 'Taumadhi Square'), ('Pottery Square', 'Pottery Square'), ('Dattatreya Square', 'Dattatreya Square'), ('Nagarkot', 'Nagarkot'), ('Changu Narayan', 'Changu Narayan'), ('Siddha Pokhari', 'Siddha Pokhari'), ('Bhairavnath Temple', 'Bhairavnath Temple'), ('Nyatapola Temple', 'Nyatapola Temple'), ('55 Windows Palace', '55 Windows Palace'), ('Thamel', 'Thamel'), ('Durbar Square', 'Durbar Square'), ('Boudhanath', 'Boudhanath'), ('Pashupatinath', 'Pashupatinath'), ('Swayambhunath', 'Swayambhunath'), ('Kirtipur', 'Kirtipur'), ('Budhanilkantha', 'Budhanilkantha'), ('Kalimati', 'Kalimati'), ('Maitidevi', 'Maitidevi'), ('Gaushala', 'Gaushala'), ('Chabahil', 'Chabahil'), ('Maitighar', 'Maitighar'), ('New Baneswor', 'New Baneswor'), ('Old Baneswor', 'Old Baneswor'), ('Sinamangal', 'Sinamangal'), ('Kalopul', 'Kalopul'), ('Dhobighat', 'Dhobighat'), ('Jawalakhel', 'Jawalakhel'), ('Kupondole', 'Kupondole'), ('Lagankhel', 'Lagankhel'), ('Sanepa', 'Sanepa'), ('Bagbazar', 'Bagbazar'), ('Putalisadak', 'Putalisadak'), ('Kamalpokhari', 'Kamalpokhari'), ('Naxal', 'Naxal'), ('Baluwatar', 'Baluwatar'), ('Maharajgunj', 'Maharajgunj'), ('Basundhara', 'Basundhara'), ('Dhapasi', 'Dhapasi'), ('Buddha Nagar', 'Buddha Nagar'), ('Kalanki', 'Kalanki'), ('Teku', 'Teku'), ('Tripureshwor', 'Tripureshwor'), ('Sitapaila', 'Sitapaila'), ('Swoyambhu', 'Swoyambhu'), ('Balkhu', 'Balkhu'), ('Kuleshwor', 'Kuleshwor'), ('Chakupat', 'Chakupat'), ('Jadibuti', 'Jadibuti'), ('Patan Durbar Square', 'Patan Durbar Square'), ('Ashokan Stupas', 'Ashokan Stupas'), ('Mahaboudha Temple', 'Mahaboudha Temple'), ('Taleju Temple', 'Taleju Temple'), ('Bhimsen Tower', 'Bhimsen Tower'), ('Hiranya Varna Mahavihar', 'Hiranya Varna Mahavihar'), ('Jagat Narayan Temple', 'Jagat Narayan Temple'), ('Chabahil Stupa', 'Chabahil Stupa'), ('Tusha Hiti', 'Tusha Hiti'), ('Pulchowk', 'Pulchowk'), ('Jawalakhel', 'Jawalakhel'), ('Kupondole', 'Kupondole'), ('Lagankhel', 'Lagankhel'), ('Sanepa', 'Sanepa'), ('Balkumari', 'Balkumari'), ('Bhanimandal', 'Bhanimandal'), ('Ekantakuna', 'Ekantakuna'), ('Satdobato', 'Satdobato'), ('Imadol', 'Imadol'), ('Bhaisepati', 'Bhaisepati')], help_text='Select a location', max_length=255)),
                ('sub_address', models.CharField(blank=True, help_text='Street name or additional address details', max_length=255, null=True)),
                ('date_of_registration', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='landlord_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Leasee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(choices=[('Bhaktapur Durbar Square', 'Bhaktapur Durbar Square'), ('Taumadhi Square', 'Taumadhi Square'), ('Pottery Square', 'Pottery Square'), ('Dattatreya Square', 'Dattatreya Square'), ('Nagarkot', 'Nagarkot'), ('Changu Narayan', 'Changu Narayan'), ('Siddha Pokhari', 'Siddha Pokhari'), ('Bhairavnath Temple', 'Bhairavnath Temple'), ('Nyatapola Temple', 'Nyatapola Temple'), ('55 Windows Palace', '55 Windows Palace'), ('Thamel', 'Thamel'), ('Durbar Square', 'Durbar Square'), ('Boudhanath', 'Boudhanath'), ('Pashupatinath', 'Pashupatinath'), ('Swayambhunath', 'Swayambhunath'), ('Kirtipur', 'Kirtipur'), ('Budhanilkantha', 'Budhanilkantha'), ('Kalimati', 'Kalimati'), ('Maitidevi', 'Maitidevi'), ('Gaushala', 'Gaushala'), ('Chabahil', 'Chabahil'), ('Maitighar', 'Maitighar'), ('New Baneswor', 'New Baneswor'), ('Old Baneswor', 'Old Baneswor'), ('Sinamangal', 'Sinamangal'), ('Kalopul', 'Kalopul'), ('Dhobighat', 'Dhobighat'), ('Jawalakhel', 'Jawalakhel'), ('Kupondole', 'Kupondole'), ('Lagankhel', 'Lagankhel'), ('Sanepa', 'Sanepa'), ('Bagbazar', 'Bagbazar'), ('Putalisadak', 'Putalisadak'), ('Kamalpokhari', 'Kamalpokhari'), ('Naxal', 'Naxal'), ('Baluwatar', 'Baluwatar'), ('Maharajgunj', 'Maharajgunj'), ('Basundhara', 'Basundhara'), ('Dhapasi', 'Dhapasi'), ('Buddha Nagar', 'Buddha Nagar'), ('Kalanki', 'Kalanki'), ('Teku', 'Teku'), ('Tripureshwor', 'Tripureshwor'), ('Sitapaila', 'Sitapaila'), ('Swoyambhu', 'Swoyambhu'), ('Balkhu', 'Balkhu'), ('Kuleshwor', 'Kuleshwor'), ('Chakupat', 'Chakupat'), ('Jadibuti', 'Jadibuti'), ('Patan Durbar Square', 'Patan Durbar Square'), ('Ashokan Stupas', 'Ashokan Stupas'), ('Mahaboudha Temple', 'Mahaboudha Temple'), ('Taleju Temple', 'Taleju Temple'), ('Bhimsen Tower', 'Bhimsen Tower'), ('Hiranya Varna Mahavihar', 'Hiranya Varna Mahavihar'), ('Jagat Narayan Temple', 'Jagat Narayan Temple'), ('Chabahil Stupa', 'Chabahil Stupa'), ('Tusha Hiti', 'Tusha Hiti'), ('Pulchowk', 'Pulchowk'), ('Jawalakhel', 'Jawalakhel'), ('Kupondole', 'Kupondole'), ('Lagankhel', 'Lagankhel'), ('Sanepa', 'Sanepa'), ('Balkumari', 'Balkumari'), ('Bhanimandal', 'Bhanimandal'), ('Ekantakuna', 'Ekantakuna'), ('Satdobato', 'Satdobato'), ('Imadol', 'Imadol'), ('Bhaisepati', 'Bhaisepati')], help_text='Select a location', max_length=255)),
                ('sub_address', models.CharField(blank=True, help_text='Street name or additional address details', max_length=255, null=True)),
                ('preferred_location', models.CharField(blank=True, help_text='Preferred location for lease', max_length=255, null=True)),
                ('reviews', models.TextField(blank=True, help_text='Reviews from previous landlords', null=True)),
                ('location_url', models.URLField(blank=True, help_text='URL for the map location of the renter', max_length=500, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='leasee_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(help_text='Notification message')),
                ('is_read', models.BooleanField(default=False, help_text='Has the notification been read?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='A brief title for the room.', max_length=255)),
                ('description', models.TextField(help_text='Detailed description of the room and its facilities.')),
                ('price', models.DecimalField(decimal_places=2, help_text='Rental price (can be per day, week, or month).', max_digits=10)),
                ('address', models.CharField(help_text='Full address of the room.', max_length=255)),
                ('sub_address', models.CharField(help_text='Street name or specific sub-address.', max_length=255)),
                ('location_url', models.URLField(help_text='URL for the map location of the room.', max_length=500)),
                ('has_electricity', models.BooleanField(default=False, help_text='Is 24-hour electricity available?')),
                ('has_wifi', models.BooleanField(default=False, help_text='Is Wi-Fi service available?')),
                ('has_water_supply', models.BooleanField(default=False, help_text='Is 24/7 water supply available?')),
                ('has_parking', models.BooleanField(default=False, help_text='Is parking available?')),
                ('is_available', models.BooleanField(default=True, help_text='Is the room available for rent?')),
                ('photos', cloudinary.models.CloudinaryField(blank=True, help_text='Upload room photos.', max_length=255, null=True, verbose_name='room_photos/')),
                ('rating', models.DecimalField(blank=True, decimal_places=2, help_text='Overall rating from reviews.', max_digits=3, null=True)),
                ('pets_allowed', models.BooleanField(default=False, help_text='Are pets allowed?')),
                ('smoking_allowed', models.BooleanField(default=False, help_text='Is smoking allowed?')),
                ('curfew_time', models.TimeField(blank=True, help_text='Is there any curfew?', null=True)),
                ('rent_giver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='rooms.landlord')),
            ],
        ),
        migrations.CreateModel(
            name='Deposit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount of the deposit required.', max_digits=10)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid')], default='pending', help_text='Status of the deposit payment.', max_length=10)),
                ('deposit_date', models.DateTimeField(auto_now_add=True)),
                ('leasee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deposits', to='rooms.leasee')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deposits', to='rooms.room')),
            ],
        ),
        migrations.CreateModel(
            name='VisitRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_date', models.DateTimeField(auto_now_add=True, help_text='Date and time when the visit request was made.')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled')], default='pending', help_text='Status of the visit request.', max_length=10)),
                ('leasee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visit_requests', to='rooms.leasee')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visit_requests', to='rooms.room')),
            ],
        ),
    ]
