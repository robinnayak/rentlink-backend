# Generated by Django 5.1 on 2024-09-26 15:57

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Landlord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_number', models.CharField(help_text='Contact phone number', max_length=15, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', message='Enter a valid phone number')])),
                ('address', models.TextField(help_text="Landlord's address")),
                ('company_name', models.CharField(blank=True, max_length=255, null=True)),
                ('date_of_registration', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='landlord_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Leasee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_number', models.CharField(help_text='Contact phone number', max_length=15, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', message='Enter a valid phone number')])),
                ('address', models.TextField(help_text="Leasee's address")),
                ('preferred_location', models.CharField(blank=True, help_text='Preferred location for lease', max_length=255, null=True)),
                ('reviews', models.TextField(blank=True, help_text='Reviews from previous landlords', null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='leasee_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='A brief title for the room.', max_length=255)),
                ('description', models.TextField(help_text='Detailed description of the room and its facilities.')),
                ('price', models.DecimalField(decimal_places=2, help_text='Rental price (can be per day, week, or month).', max_digits=10)),
                ('location', models.CharField(help_text='Room location, use GPS coordinates or a full address.', max_length=255)),
                ('has_electricity', models.BooleanField(default=False, help_text='Is 24-hour electricity available?')),
                ('has_wifi', models.BooleanField(default=False, help_text='Is Wi-Fi service available?')),
                ('has_water_supply', models.BooleanField(default=False, help_text='Is 24/7 water supply available?')),
                ('has_parking', models.BooleanField(default=False, help_text='Is parking available?')),
                ('is_available', models.BooleanField(default=True, help_text='Is the room available for rent?')),
                ('photos', models.ImageField(blank=True, help_text='Upload room photos.', null=True, upload_to='room_photos/')),
                ('rating', models.DecimalField(blank=True, decimal_places=2, help_text='Overall rating from reviews.', max_digits=3, null=True)),
                ('pets_allowed', models.BooleanField(default=False, help_text='Are pets allowed?')),
                ('smoking_allowed', models.BooleanField(default=False, help_text='Is smoking allowed?')),
                ('curfew_time', models.TimeField(blank=True, help_text='Is there any curfew?', null=True)),
                ('rent_giver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='rooms.landlord')),
            ],
        ),
    ]
